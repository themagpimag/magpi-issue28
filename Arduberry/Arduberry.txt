Before I start I'll give you two crucial definitions; 1) microcontroller - an autonomous, single processor computer system that doesn't have an operating system, has general purpose I/O (GPIO), programmable memory (flash & RAM) and some read-only memory it will normally run a single custom made dedicated program for a single purpose 2) microcomputer - a single or multiple processor system that runs a operating system. It may have external GPIO, it usually has a keyboard and screen. It will normally run a multi-programming, multi-tasking system and a variety of general purpose application programs and some locally written programs. The crucial difference is that a microcomputer appears to be running more than one task at a time, a microcontroller is running one task only. 

Since its introduction in 2005 the Arduino has become a very popular microcontroller used by hobbyists. It's cheap, it's easy to program, it's versatile and well supported. The single task application program running on an Arduino is typically called a "sketch".

<<<INSERT Arduino_Uno.jpg HERE >>>

Compare that with the Raspberry Pi which is a very popular microcomputer used for education, by hobbyists and a whole variety of other folks for a multitude of tasks. They're from the same stable, built by their developers for similar reasons. 

The Raspberry Pi and the Arduino may be suited to different projects but they work well together. It's quite common for the Raspberry Pi with the arduino development IDE to be used to develop sketches that can be uploaded to an Arduino. The starting point is sudo apt-get install arduino then when that is complete connect your Arduino with the USB-A to USB-B wire, start the GUI and write your first application.

Here's a variation on the normal blink program that will light four LEDs in sequence.

/* blinkSeq.ino 
  A variation on "Hello World" for the Arduberry
 (C) 2014 Dougie Lawson, Creative Commons v4.0 BY-NC-SA
 
 Wire four LEDs with 560ohm resistors to pins 6, 7, 8 & 9
  */

void setup() {
  for (int i=6; i<=9; i++) {
    pinMode(i, OUTPUT);
  }
}

void loop() {
  for (int i=6; i<=9; i++) {
    digitalWrite(i,LOW);
    delay(999);
    digitalWrite(i,HIGH);
    delay(999);
  }
}

Wire four LEDS, each with a 560 ohm current limiting resistor between pin 6, pin 7, pin 8 and pin 9 and GND on your Arduino Uno. Upload the sketch and the LEDs will wink. (On an Arduino Uno there's a factory fitted LED on pin 13 that doesn't exist on an Arduberry so we'd need to add a fifth LED with a 560 ohm resistor between pin 13 and GND to run the example blink sketch.)

So we have the basics of using Raspbian with the GUI to program an Arduino. The only thing that's cumbersome is the wiring, taking up a USB socket on the Pi (or in our USB hub). Wouldn't it be good if we could get an Arduino (primarily as a development tool) that sat on the Raspberry Pi GPIO pins (in the way that a shield fits on an Arduino Uno). 

https://www.dexterindustries.com/Arduberry/ have done just that. They've developed an Arduberry. So lets take a look at it. 

<<< INSERT Arduberry_TOP.jpg HERE >>>

From the top it looks like a Arduino Uno, there's the standard layout of sockets that are used for stacking Arduino shields. Note: this Arduberry is missing a few optional components, there's no 5V power supply, voltage regulator, capacitors or header pins for the ICSP connector.

<<< INSERT Arduberry_BOTTOM.jpg HERE >>>

From the bottom you see that there's a standard 26-pin GPIO connector and the heart of the Arduino, the Atmel Atmega328P chip down there. The Arduberry will sit on a Raspberry Pi model A, model B or model B+. When it's mounted the Arduberry gets connections to the Raspberry Pi 5V, GND, TX & RX pins. So you MUST shutdown your Raspberry Pi and pull the power before mounting an Arduberry on the GPIO pins. With a model B+ you MUST ensure that just the first 26 pins are connected and are lined up correctly. Failure to do that could destroy either your Raspberry Pi or your Arduberry or both.

<<< INSERT Arduberry_Pi.jpg HERE >>>

So we've got the Arduberry mounted and we've rebooted Raspbian. There's some work needed to get the Arduberry running.

cd /tmp
git clone https://github.com/DexterInd/ArduBerry.git
cd Arduberry
sudo chmod +x install.sh
sudo ./install.sh
reply Y to the "Do you want to continue [Y/n]" prompt.

That install.sh script will install all the pieces you need (and have not yet installed), customise them for the Arduberry and when it's done it will reboot your Raspberry Pi.

If your Raspberry Pi isn't set-up to use the GUI automatically, you'll need to login as user pi and use startx. When the desktop appears there's should be the new Arduino IDE icon (if not look in the start menu). Start the IDE and load the example blink sketch (File --> Examples --> 01.Basics --> blink) or type in my version. 

There's a slight quirk with the IDE when it comes to uploading the sketch. With a regular Arduino Uno connected using USB normally we'd click the "upload" icon. With the Arduberry that doesn't work and generates an obscure error message; "avrdude: stk500_recv(): programmer is not responding". To upload the sketch we need to ensure we're using the right programmer options (Tools --> Programmer --> Raspberry Pi GPIO) then use the CTRL+SHIFT+U keys to make it so.

If we swap the LED on pin 9 for a red LED, on pin 8 for a yellow LED and pin 7 for a green LED this sketch will run the familiar sequence of traffic lights. The Arduino programming language is a hybrid between C and C++ so you can use compiler directives. In this sketch if we change it to "undef" UK and "define" US it will change to the United States sequence (from red straight to green, skipping red & amber). Compiler directives are useful for debugging you can define code that will only be built into the sketch when a true value is defined for a DEBUG compiler variable. I use that to litter my code with Serial.print() and Serial.println() commands.

/* TL.ino 
 
 Traffic lights on the Arduino
 (C) 2014 Dougie Lawson, Creative Commons v4.0 BY-NC-SA
 
 */

/* Use compiler directives to control the sequence */

// RED, RED+AMBER, GREEN, AMBER RED ...
#define UK
#undef US

// We're going to skip RED+AMBER
// RED, GREEN, AMBER, RED ...
// #define US
// #undef UK

int redLED = 9;
int yellLED = 8;
int grnLED = 7;

void setup() {

  pinMode(redLED, OUTPUT);
  pinMode(yellLED, OUTPUT);
  pinMode(grnLED, OUTPUT);

}

void loop() {

  digitalWrite(redLED, HIGH);
  delay(1500);

#ifdef UK
  digitalWrite(yellLED, HIGH);
  delay(750);
#endif

  digitalWrite(redLED, LOW);
  digitalWrite(yellLED, LOW);
  digitalWrite(grnLED, HIGH);
  delay(1500);
  digitalWrite(grnLED, LOW);
  digitalWrite(yellLED, HIGH);
  delay(750);
  digitalWrite(yellLED, LOW);

}

One thing I found straight away with the Arduberry is that while the Raspberry Pi is powered up (even if Raspbian has been shut down with a sudo shutdown -h command) the Arduberry will continue to run. So I wrote a null sketch I could load to, effectively, leave the Arduberry running dormant. 

/* null.ino
 Load a null sketch so the Arduberry runs dormant
 */

void setup() {
}
void loop() {
}

With an Arduino Uno it's normal to pull the USB (or the 5V power) to shut it down, but that's less easy with the Arduberry since we have to shutdown Raspbian, pull the power, pull the board off the GPIO pins then reboot the Raspberry Pi. With the null sketch the Arduberry is still running the dummy loop() function but appears to be doing nothing to the outside world.

The other feature of the Arduberry is that we can upload a sketch while it is stacked on top of the Raspberry Pi, get it debugged and running the way we want then perform a "Arduberry Separation" and have the Arduberry running as a stand-alone system. So we upload the sketch with CTRL+SHIFT+U while the Raspberry Pi is running, then shutdown the Raspberry Pi (logout from the GUI and choose the shutdown option or open a command window and use a sudo shutdown -h now command). Pull the power supply from the Raspberry Pi (because we don't want to damage either the Raspberry Pi or the Arduberry during separation). The Arduberry has a microUSB connector on the board, so we can borrow the Raspberry Pi's power supply to power an independent Arduberry. 

<<< INSERT Arduberry_No_Pi.jpg HERE >>>

See https://www.dexterindustries.com/Arduberry/getting-started/powering-arduberry-dc-power-jack/ if you want to add the optional components to add a 5V power supply to the Arduberry.

We can also develop code on the Arduberry, get it debugged and running then upload it to a regular Arduino Uno, the Arduberry becomes a development system rather than a runtime system. The layout of the pins is identical, the programming code we write for the sketch is identical, the size of the file uploaded to the Arduino or Arduberry is identical. That may be an easier way to deploy our Arduino programs into the field where they're going to run away from the Raspberry Pi.

The only problem I found with the Arduberry during my testing is that the header sockets are not labelled on the silk-screen printing on the Arduberry board, I kept having to refer to a wiring diagram http://forum.arduino.cc/index.php/topic,146315.0.html or stare at my Arduino Uno to be sure I wasn't wiring things to the wrong places. I'm from the school of wire it, check it, check it again, power it up. I don't like wiring (or re-wiring) anything while it is running.

After starting this article I've done some additional programming using I²C on the Arduberry. I pulled all of my I²C devices (DS1307 RTC, MCP23017 with an 8x8 LED matrix and LSM303DLHC accelometer/magnetometer) off my Raspberry Pi and wired them the Arduberry I²C pins. Programming those devices with C (gcc and Gordon Henderson's wiringPi) on the Raspberry Pi or the C/C++ hybrid and the Arduino IDE is interchangable. That may be a subject for a future article.